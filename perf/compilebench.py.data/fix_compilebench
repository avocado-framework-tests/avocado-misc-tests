--- compilebench-0.6/compilebench.org	2021-04-20 10:59:17.440000000 +0530
+++ compilebench-0.6/compilebench	2021-04-20 16:51:03.282013217 +0530
@@ -54,7 +54,7 @@
         return -1
     if diry in x:
         return 1
-    return cmp(x, y)
+    return 0
 
 # simple recursive directory rm.  Have not yet checked to see if it
 # is dramatically slower than system('rm -rf') TODO
@@ -74,7 +74,7 @@
     return (user, system, real)
 
 def random_order(dhash, rnd):
-    keys = dhash.keys()
+    keys = list(dhash.keys())
     rnd.shuffle(keys)
     ret = [ (str, dhash[str]) for str in keys ]
     return ret
@@ -89,8 +89,8 @@
         dirname = 'native-%d' % i
         fullpath = os.path.join(benchdir, dirname)
 
-    sorted = dhash.keys()
-    sorted.sort(cmp=pathcomp)
+    sorted = list(dhash.keys())
+    sorted.sort()
     tmplist = []
     for x in sorted:
         tmplist.append((x, dhash[x]))
@@ -113,7 +113,7 @@
     start_time = os.times()
     for root, dirs, files in os.walk(dirname, topdown=True):
         for name in files:
-            fp = file(os.path.join(root, name))
+            fp = open(os.path.join(root, name))
             while True:
                 readbuf = fp.read(bufsize)
                 if not readbuf:
@@ -155,7 +155,7 @@
 
 # parse a dataset file.  format: filename size
 def read_dataset(dirname, filename):
-    fp = file(os.path.join(dirname, filename))
+    fp = open(os.path.join(dirname, filename))
     lines = {}
     for x in fp:
         words = x.split()
@@ -222,7 +222,7 @@
         if unlink:
             try: os.unlink(fname)
             except: pass
-        fp = file(fname, 'a+')
+        fp = open(fname, 'a+')
         if readfirst:
             totalread = 0
             while True:
@@ -336,8 +336,8 @@
     good = [ x for x in op if len(x[1]) > 0 ]
     if len(good) == 0:
         return 0
-    ch = good[rnd.choice(xrange(0, len(good)))]
-    dir = rnd.choice(ch[1].keys())
+    ch = good[rnd.choice(range(0, len(good)))]
+    dir = rnd.choice(list(ch[1].keys()))
     if not dir:
         return 0
     if rnd.randint(0, 3) == 1:
@@ -360,9 +360,9 @@
     good = [ x for x in op if len(x[1]) > 0 ]
     if len(good) == 0:
         return 0
-    ch = good[rnd.choice(xrange(0, len(good)))]
+    ch = good[rnd.choice(range(0, len(good)))]
 
-    dir = rnd.choice(ch[1].keys())
+    dir = rnd.choice(list(ch[1].keys()))
     if not dir:
         return 0
     mbs = run_directory(ch[0], dir, "compile dir")
@@ -381,10 +381,10 @@
     good = [ x for x in op if len(x[1]) > 0 ]
     if len(good) == 0:
         return 0
-    ch = good[rnd.choice(xrange(0, len(good)))]
+    ch = good[rnd.choice(range(0, len(good)))]
     if len(ch[1]) == 0:
         return 0
-    dir = rnd.choice(ch[1].keys())
+    dir = rnd.choice(list(ch[1].keys()))
     if not dir:
         return 0
     mbs = clean_directory(ch[0], dir)
@@ -400,8 +400,8 @@
     good = [ x for x in op if len(x) > 0 ]
     if len(good) == 0:
         return 0
-    ch = good[rnd.choice(xrange(0, len(good)))]
-    dir = rnd.choice(ch.keys())
+    ch = good[rnd.choice(range(0, len(good)))]
+    dir = rnd.choice(list(ch.keys()))
     seconds = rmrf(dir)
     del ch[dir]
     sys.stderr.write("delete %s in %.2f seconds\n" % (dir, seconds[2]));
@@ -418,8 +418,8 @@
     good = [ x for x in op if len(x) > 0 ]
     if len(good) == 0:
         return 0
-    ch = good[rnd.choice(xrange(0, len(good)))]
-    dir = rnd.choice(ch.keys())
+    ch = good[rnd.choice(range(0, len(good)))]
+    dir = rnd.choice(list(ch.keys()))
     mbs = read_dirtree(dir)
     if ch == dset.unpatched_compiled_dirs or ch == dset.patched_compiled_dirs:
         add_times(dset.read_compiled_stats, mbs)
@@ -434,8 +434,8 @@
     good = [ x for x in op if len(x) > 0 ]
     if len(good) == 0:
         return 0
-    ch = good[rnd.choice(xrange(0, len(good)))]
-    dir = rnd.choice(ch.keys())
+    ch = good[rnd.choice(range(0, len(good)))]
+    dir = rnd.choice(list(ch.keys()))
     seconds = stat_dirtree(dir)
     if ch == dset.unpatched_compiled_dirs or ch == dset.patched_compiled_dirs:
         add_times(dset.stat_compiled_stats, seconds)
@@ -456,18 +456,18 @@
 def print_stat(stat, tag, desc):
     runs = stat[-1]
     if (runs == 0):
-        print "no runs for %s" % tag
+        print("no runs for %s" % tag)
     else:
         user = stat[0] / runs
         system = stat[1] / runs
         avg = stat[2] / runs
-        print "%s total runs %d avg %.2f %s (user %.2fs sys %.2fs)" % (tag,
-               runs, avg, desc, user, system)
+        print("%s total runs %d avg %.2f %s (user %.2fs sys %.2fs)" % (tag,
+               runs, avg, desc, user, system))
 
 # print average stats for all the phases.
 def print_all_stats(dset):
-    print "\nrun complete:"
-    print "=" * 74
+    print("\nrun complete:")
+    print("=" * 74)
     print_stat(dset.initial_create_stats, "initial create", "MB/s")
     print_stat(dset.create_stats, "create", "MB/s")
     print_stat(dset.patch_stats, "patch", "MB/s")
@@ -485,7 +485,7 @@
 
     if not drop_caches_err and not options.no_sync:
         try:
-            fp = file('/proc/sys/vm/drop_caches', 'w')
+            fp = open('/proc/sys/vm/drop_caches', 'w')
             fp.write('3')
             fp.close()
         except:
@@ -571,7 +571,7 @@
 drop_caches_err = 0
 
 pid = start_blktrace(options.trace, "create-dirs", options.device)
-for x in xrange(0, options.initial_dirs):
+for x in range(0, options.initial_dirs):
     dirname = "kernel-%d" % x
     mbs = run_directory(dset.unpatched, dirname, "create dir")
     dset.unpatched_dirs[dirname] = 1
@@ -602,7 +602,7 @@
     run_syncs = False
 
     pid = start_blktrace(options.trace, "read-dirs", options.device)
-    for x in xrange(3):
+    for x in range(3):
         read_one_dir(dset, rnd)
         total_runs += 1
     stop_blktrace(pid)
